import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import datetime

# ----------- PARTE 1: Simulaci√≥n base ----------- #
np.random.seed(42)
dias = 31
fechas = pd.date_range(start="2024-07-01", periods=dias, freq="D")

# Radiaci√≥n solar simulada (kWh/m¬≤)
media_radiacion = 6.5
std_radiacion = 1.0
radiacion = np.random.normal(media_radiacion, std_radiacion, dias)
radiacion = np.clip(radiacion, 0, None)

# Consumo con fines de semana m√°s altos
consumo = []
for fecha in fechas:
    base = 6.5 if fecha.weekday() >= 5 else 5.0
    valor = base + np.random.normal(0, 0.5)
    consumo.append(max(valor, 0))

# Crear DataFrame
area_panel = 1.6
eficiencia_neta = 0.153

df = pd.DataFrame({
    "Fecha": fechas,
    "Radiaci√≥n (kWh/m¬≤)": radiacion,
    "Consumo (kWh)": consumo
})
df["Generaci√≥n por panel (kWh)"] = df["Radiaci√≥n (kWh/m¬≤)"] * area_panel * eficiencia_neta

# ----------- STREAMLIT UI ----------- #
st.set_page_config(page_title="Dimensionamiento Solar", layout="wide")
st.title("üîÜ Dimensionamiento de Paneles Solares - Madrid, Julio")

# Sidebar
st.sidebar.header("‚öôÔ∏è Par√°metros")
n_paneles = st.sidebar.slider("N√∫mero de paneles", 1, 20, 8)
simular_nublados = st.sidebar.checkbox("Simular 3 d√≠as nublados")

# Simulaci√≥n d√≠as nublados
df_sim = df.copy()
if simular_nublados:
    i = np.random.randint(0, dias - 2)
    df_sim.loc[i:i+2, "Radiaci√≥n (kWh/m¬≤)"] *= 0.3
    df_sim["Generaci√≥n por panel (kWh)"] = df_sim["Radiaci√≥n (kWh/m¬≤)"].values * area_panel * eficiencia_neta

# Generaci√≥n total

df_sim["Generaci√≥n total (kWh)"] = df_sim["Generaci√≥n por panel (kWh)"] * n_paneles
df_sim["Cubre consumo"] = df_sim["Generaci√≥n total (kWh)"] >= df_sim["Consumo (kWh)"]

# ----------- Gr√°fico principal ----------- #
st.subheader("üìä Generaci√≥n vs Consumo Diario")
st.line_chart(df_sim.set_index("Fecha")[['Consumo (kWh)', 'Generaci√≥n total (kWh)']])

# ----------- M√©tricas ----------- #
dias_cubiertos = df_sim["Cubre consumo"].sum()
porcentaje_cubierto = dias_cubiertos / dias * 100
st.metric("‚úÖ D√≠as cubiertos", f"{dias_cubiertos}/31 ({porcentaje_cubierto:.1f}%)")

# ----------- Gr√°fico de cobertura ----------- #
resultados = []
for n in range(1, 21):
    total = df["Generaci√≥n por panel (kWh)"] * n
    cubiertos = (total >= df["Consumo (kWh)"].values).sum()
    resultados.append({"Paneles": n, "% D√≠as Cubiertos": cubiertos / dias * 100})

df_resultados = pd.DataFrame(resultados)
st.subheader("üìà Cobertura vs N√∫mero de Paneles")
st.line_chart(df_resultados.set_index("Paneles"))

# ----------- An√°lisis econ√≥mico ----------- #
costo_panel = 300  # ‚Ç¨
precio_kWh = 0.20  # ‚Ç¨/kWh
dias_anio = 365
gen_diaria = df["Generaci√≥n por panel (kWh)"].mean()
gen_anual = gen_diaria * dias_anio * n_paneles
ahorro_anual = gen_anual * precio_kWh
costo_total = n_paneles * costo_panel
punto_equilibrio = costo_total / ahorro_anual

st.subheader("üí∞ An√°lisis Econ√≥mico")
st.markdown(f"**Costo total del sistema:** ‚Ç¨{costo_total:,.2f}")
st.markdown(f"**Ahorro anual estimado:** ‚Ç¨{ahorro_anual:,.2f}")
st.markdown(f"**Energ√≠a generada al a√±o:** {gen_anual:,.1f} kWh")
st.markdown(f"**Punto de equilibrio:** {punto_equilibrio:.1f} a√±os")

# ----------- Footer ----------- #
st.markdown("---")
st.markdown("App desarrollada para el proyecto de dimensionamiento solar ‚Ä¢ Simulaciones en Madrid ‚Ä¢ Julio")
